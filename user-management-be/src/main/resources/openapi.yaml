openapi: 3.0.3
info:
  title: Microservice Template API
  description: REST API for the microservice template with JWT authentication
  version: 1.0.0
  contact:
    name: Template Team
    email: support@template.com

servers:
  - url: http://localhost:8080/api
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
        name:
          type: string
          minLength: 2
          maxLength: 50
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          minLength: 8
          maxLength: 20
          description: User's password
        role:
          type: string
          enum: [USER, ADMIN]
          default: USER
          description: User's role
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: User last update timestamp

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          description: User's password

    ApiError:
      type: object
      properties:
        status:
          type: string
          enum: [BAD_REQUEST, UNAUTHORIZED, FORBIDDEN, NOT_FOUND, CONFLICT, INTERNAL_SERVER_ERROR]
          description: Error status
        message:
          type: string
          description: Error message
        subErrors:
          type: object
          description: Detailed validation errors
          additionalProperties:
            type: string

    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token for authentication

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account and returns a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /users:
    get:
      summary: Get all users
      description: Retrieves a list of all users
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    post:
      summary: Create a new user
      description: Creates a new user account
      tags:
        - User Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        description: User ID

    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found and retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

    delete:
      summary: Delete user
      description: Deletes a specific user by their ID
      tags:
        - User Management
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

tags:
  - name: Authentication
    description: Authentication related endpoints
  - name: User Management
    description: User management endpoints 